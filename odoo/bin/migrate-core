#!/bin/bash
set -e
export MARABUNTA_MODE=migration
export MARABUNTA_MIGRATION_FILE="/odoo/migration/migration_core.yml"
export MARABUNTA_DB_HOST=$DB_HOST
export MARABUNTA_DATABASE=$DB_NAME
export MARABUNTA_DB_USER=$DB_USER
export MARABUNTA_DB_PASSWORD=$DB_PASSWORD
export MARABUNTA_DB_PORT=$DB_PORT
# Restrict ADDONS_PATH to core+enterprise
ADDONS_PATH="/odoo/src/addons,/odoo/external-src/enterprise"
DB_NAME_BACKUP="${DB_NAME}_core"

echo "Starting core migration..."

# Put restricted ADDONS_PATH in Odoo configuration file
cp -a /etc/odoo.cfg /etc/odoo.cfg.bak
sed -i "s~addons_path.*~addons_path = $ADDONS_PATH~g" /etc/odoo.cfg

wait_postgres.sh

if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" )" != '1' ]
then
    echo "You must launch the database migration on the migrated database"
    exit 1
fi

echo "Removing 'marabunta_version' table..."
psql -c "DROP TABLE IF EXISTS marabunta_version;"

echo "Launching before-migrate-entrypoint..."
run-parts --verbose "/before-migrate-entrypoint.d"

echo "Launching marabunta migration..."
gosu odoo unbuffer marabunta
cp -a /etc/odoo.cfg.bak /etc/odoo.cfg   # Restore addons_path
echo "Core migration finished"

if [[ $MAKE_DB_SNAPSHOT ]]; then
    echo "Creating database snapshot '$DB_NAME_BACKUP'..."
    if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME_BACKUP'" )" = '1' ]
    then
        dropdb $DB_NAME_BACKUP
    fi
    createdb $DB_NAME_BACKUP -T $DB_NAME
fi
